apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fridgehub.fullname" . }}.ingredient-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fridgehub.labels" . | nindent 4 }}
    {{- include "fridgehub.labels" . | nindent 4 }}.ingredient-service
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "fridgehub.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ include "fridgehub.fullname" . }}.ingredient-service
        {{- include "fridgehub.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "fridgehub.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: check-db-ready
        image: postgres:12.1-alpine
        command: ['sh', '-c',
          'until pg_isready -h {{ .Release.Name }}-ingredient-db -p 5432;
          do echo waiting for database; sleep 2; done;']
      - name: check-kafka-ready
        image: busybox
        command: ['sh', '-c', 'until echo "TEST" | nc {{ .Release.Name }}-kafka:9092; do echo "Waiting for Kafka"; sleep 5; done;']
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ .Values.image.repository }}ingredient-service:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST  # TODO: Not needed because ingredient doesn't use kafka???
              value: "{{ .Release.Name }}-kafka"
            - name: THORNTAIL_KAFKA_DASH_CONFIGURATION_POST
              value: "9092"
            - name: THORNTAIL_PORT_OFFSET
              value: "0"
            - name: THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_INGREDIENTDS_CONNECTION_DASH_URL
              value: "jdbc:postgresql://{{ .Release.Name }}-ingredient-db:5432/ingredient"
            - name: THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_INGREDIENTDS_DRIVER_DASH_NAME
              value: "postgresql"
            - name: THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_INGREDIENTDS_USER_DASH_NAME
              value: "ingd"
            - name: THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_INGREDIENTDS_PASSWORD
              value: "ingd"
          ports:
            - name: http
              containerPort: 28080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ingredients/count
              port: http
            initialDelaySeconds: 60
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /ingredients/count
              port: http
            initialDelaySeconds: 60
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
